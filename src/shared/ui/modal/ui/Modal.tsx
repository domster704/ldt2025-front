import React, {FC} from "react";
import * as style from "./Modal.module.css";

interface ModalProps extends React.HTMLAttributes<HTMLDivElement> {
  /** –§–ª–∞–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
  isOpen: boolean;

  /** –ö–æ–ª–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π –∏–ª–∏ –∫–Ω–æ–ø–∫—É √ó) */
  onClose: () => void;

  /** –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
  children: React.ReactNode;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
 *
 * ---
 * ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–º –æ–≤–µ—Ä–ª–µ–µ–º.
 * - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è:
 *   - –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Ñ–æ–Ω—É (–æ–≤–µ—Ä–ª–µ—é),
 *   - –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "√ó".
 * - –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö HTML-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
 *
 * ---
 * ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
 * ```
 * +-----------------------------------+
 * | overlay (–∫–ª–∏–∫ = –∑–∞–∫—Ä—ã—Ç—å)          |
 * |   +---------------------------+   |
 * |   | content                   |   |
 * |   |  [ √ó ]  children          |   |
 * |   +---------------------------+   |
 * +-----------------------------------+
 * ```
 *
 * ---
 * ### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * @example
 * ```tsx
 * import React, {useState} from "react";
 * import Modal from "@shared/ui/modal";
 *
 * export const Example = () => {
 *   const [open, setOpen] = useState(false);
 *
 *   return (
 *     <>
 *       <button onClick={() => setOpen(true)}>–û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É</button>
 *       <Modal isOpen={open} onClose={() => setOpen(false)}>
 *         <h2>–ü—Ä–∏–≤–µ—Ç üëã</h2>
 *         <p>–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª–∫–∏</p>
 *       </Modal>
 *     </>
 *   );
 * };
 * ```
 */
const Modal: FC<ModalProps> = ({
                                 isOpen,
                                 onClose,
                                 children,
                                 ...props
                               }) => {
  if (!isOpen) return null;

  return (
    <div className={style.overlay} onClick={onClose}>
      <div {...props} className={[
        style.content,
        props.className || ''
      ].join(' ')}
           onClick={e => e.stopPropagation()}>
        <button className={style.close} onClick={onClose}>√ó</button>
        {children}
      </div>
    </div>
  );
};

export default Modal;
