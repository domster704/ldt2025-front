import {createAppSelector, RootState} from "@app/store/store";
import {patientAdapter} from "@entities/patient/model/adapters";

const baseSelector = (state: RootState) => state.patients.items;
const selectors = patientAdapter.getSelectors();

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è **–≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤**.
 *
 * üîπ –õ–æ–≥–∏–∫–∞:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä {@link patientAdapter} –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.
 * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ "—Å—ã—Ä–æ–º" –≤–∏–¥–µ (–∫–∞–∫ –æ–Ω–∏ –µ—Å—Ç—å –≤ Redux store).
 *
 * @param state –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux
 * @returns –º–∞—Å—Å–∏–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
 *
 * @example
 * ```tsx
 * const patients = useAppSelector(selectAllPatients);
 * return (
 *   <ul>
 *     {patients.map(p => <li key={p.id}>{p.fio}</li>)}
 *   </ul>
 * );
 * ```
 */
export const selectAllPatients = createAppSelector(
  baseSelector,
  (state) => selectors
    .selectAll(state)
    .sort((a, b) => a.id - b.id)
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è **–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞**.
 *
 * üîπ –õ–æ–≥–∏–∫–∞:
 * - –ë–µ—Ä—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ `chosen` –∏–∑ slice `patients`.
 * - –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å `null`, –µ—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω.
 *
 * @param state –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux
 * @returns –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç –∏–ª–∏ `null`
 *
 * @example
 * ```tsx
 * const patient = useAppSelector(selectChosenPatient);
 * if (!patient) {
 *   return <p>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω</p>;
 * }
 * return <h3>–í—ã–±—Ä–∞–Ω: {patient.fio}</h3>;
 * ```
 */
export const selectChosenPatient = (state: RootState) => state.patients.chosen;
